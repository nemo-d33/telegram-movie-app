// Telegram Web App
const tg = window.Telegram.WebApp;

// Data
let movies = [];
let filteredMovies = [];
let currentCategory = 'all';

// Initialize app
function initApp() {
    console.log('üöÄ Initializing app...');
    
    // Initialize Telegram Web App
    tg.ready();
    tg.expand();
    
    // Show loading
    showLoading();
    
    // Load movies after short delay
    setTimeout(() => {
        loadMovies();
        hideLoading();
        renderMovies(movies);
        setupEventListeners();
        console.log('‚úÖ App initialized successfully');
    }, 500);
}

// Load movies data
function loadMovies() {
    console.log('üìÄ Loading movies...');
    
    movies = [
        {
            id: 1,
            title: "–§–æ—Ä—Å–∞–∂ 9",
            year: "2021",
            poster: "https://images.unsplash.com/photo-1594909122845-11baa439b7bf?w=300&h=400&fit=crop",
            videoUrl: "https://rutube.ru/play/embed/bb0c848e121e79263789b3b19460bff0/",
            category: "films",
            description: "–î–æ–º–∏–Ω–∏–∫ –¢–æ—Ä–µ—Ç—Ç–æ –≤–µ–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω—É—é –∂–∏–∑–Ω—å —Å –õ–µ—Ç—Ç–∏ –∏ —Å–≤–æ–∏–º —Å—ã–Ω–æ–º."
        },
        {
            id: 2,
            title: "–ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª",
            year: "2019", 
            poster: "https://images.unsplash.com/photo-1635805737707-575885ab0820?w=300&h=400&fit=crop",
            videoUrl: "https://rutube.ru/play/embed/1234567891",
            category: "films",
            description: "–û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –∂–∏–≤—ã—Ö —á–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –ú—Å—Ç–∏—Ç–µ–ª–µ–π –ø—ã—Ç–∞—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¢–∞–Ω–æ—Å–∞."
        },
        {
            id: 3,
            title: "–ò–≥—Ä–∞ –≤ –∫–∞–ª—å–º–∞—Ä–∞",
            year: "2021",
            poster: "https://images.unsplash.com/photo-1560169897-fc0cdbdfa4d5?w=300&h=400&fit=crop",
            videoUrl: "https://rutube.ru/play/embed/1234567892",
            category: "series",
            description: "–°–æ—Ç–Ω–∏ –∏–≥—Ä–æ–∫–æ–≤-–±–∞–Ω–∫—Ä–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –¥–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ."
        },
        {
            id: 4,
            title: "–•–æ–ª–æ–¥–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ",
            year: "2013",
            poster: "https://images.unsplash.com/photo-1618336756473-37d8fcf7d7be?w=300&h=400&fit=crop",
            videoUrl: "https://rutube.ru/play/embed/1234567893",
            category: "cartoons",
            description: "–ë–µ—Å—Å—Ç—Ä–∞—à–Ω–∞—è –ê–Ω–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥–æ—Ä—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ—é —Å–µ—Å—Ç—Ä—É –≠–ª—å–∑—É."
        }
    ];
    
    filteredMovies = [...movies];
    console.log('‚úÖ Movies loaded:', movies.length);
}

// Render movies to the page
function renderMovies(moviesArray) {
    console.log('üé¨ Rendering movies:', moviesArray.length);
    
    const moviesList = document.getElementById('moviesList');
    
    if (!moviesList) {
        console.error('‚ùå moviesList element not found!');
        return;
    }
    
    if (moviesArray.length === 0) {
        moviesList.innerHTML = `
            <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #888;">
                üìΩÔ∏è –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </div>
        `;
        return;
    }
    
    moviesList.innerHTML = moviesArray.map(movie => `
        <div class="movie-card" onclick="openMovie(${movie.id})">
            <img src="${movie.poster}" alt="${movie.title}" class="movie-poster"
                 onerror="this.src='https://images.unsplash.com/photo-1485846234645-a62644f84728?w=300&h=400&fit=crop'">
            <div class="movie-info">
                <div class="movie-title">${movie.title}</div>
                <div class="movie-year">${movie.year}</div>
            </div>
        </div>
    `).join('');
    
    console.log('‚úÖ Movies rendered successfully');
}

// Open movie details
function openMovie(movieId) {
    console.log('üé• Opening movie:', movieId);
    
    const movie = movies.find(m => m.id === movieId);
    if (!movie) {
        console.error('‚ùå Movie not found:', movieId);
        return;
    }
    
    tg.showPopup({
        title: `üé¨ ${movie.title} (${movie.year})`,
        message: movie.description,
        buttons: [
            {id: 'watch', type: 'default', text: 'üé• –°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º'},
            {id: 'cancel', type: 'cancel'}
        ]
    }, function(buttonId) {
        if (buttonId === 'watch') {
            playVideo(movie.videoUrl, movie.title);
        }
    });
}

// Play video
function playVideo(videoUrl, title) {
    console.log('‚ñ∂Ô∏è Playing video:', title);
    
    const playerContainer = document.getElementById('playerContainer');
    const videoPlayerContainer = document.getElementById('rutubePlayer');
    
    if (!playerContainer || !videoPlayerContainer) {
        console.error('‚ùå Player containers not found!');
        return;
    }
    
    videoPlayerContainer.innerHTML = `
        <iframe 
            class="rutube-iframe"
            src="${videoUrl}" 
            frameborder="0" 
            allow="autoplay; encrypted-media; fullscreen"
            allowfullscreen
        ></iframe>
    `;
    
    playerContainer.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    console.log('‚úÖ Video player opened');
}

// Close player
function closePlayer() {
    console.log('‚ùå Closing player');
    
    const playerContainer = document.getElementById('playerContainer');
    const videoPlayerContainer = document.getElementById('rutubePlayer');
    
    if (videoPlayerContainer) {
        videoPlayerContainer.innerHTML = '';
    }
    
    if (playerContainer) {
        playerContainer.style.display = 'none';
    }
    
    document.body.style.overflow = 'auto';
}

// Setup event listeners
function setupEventListeners() {
    console.log('üîß Setting up event listeners...');
    
    // Search input
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase().trim();
            filterMovies(searchTerm, currentCategory);
        });
    }
    
    // Category buttons
    const categoryBtns = document.querySelectorAll('.category-btn');
    categoryBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            categoryBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const category = this.dataset.category;
            currentCategory = category;
            filterMovies(searchInput.value.toLowerCase().trim(), category);
        });
    });
    
    // ESC key to close player
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closePlayer();
        }
    });
    
    console.log('‚úÖ Event listeners setup complete');
}

// Filter movies
function filterMovies(searchTerm, category) {
    console.log('üîç Filtering movies:', { searchTerm, category });
    
    let results = [...movies];
    
    // Filter by category
    if (category !== 'all') {
        results = results.filter(movie => movie.category === category);
    }
    
    // Filter by search term
    if (searchTerm) {
        results = results.filter(movie => 
            movie.title.toLowerCase().includes(searchTerm) ||
            movie.description.toLowerCase().includes(searchTerm)
        );
    }
    
    filteredMovies = results;
    renderMovies(filteredMovies);
}

// Show loading
function showLoading() {
    const loading = document.getElementById('loading');
    const moviesList = document.getElementById('moviesList');
    
    if (loading) loading.style.display = 'block';
    if (moviesList) moviesList.innerHTML = '';
}

// Hide loading
function hideLoading() {
    const loading = document.getElementById('loading');
    if (loading) loading.style.display = 'none';
}

// Start the app when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM loaded, starting app...');
    initApp();
});

// Global functions for HTML onclick
window.openMovie = openMovie;
window.closePlayer = closePlayer;
