const tg = window.Telegram.WebApp;

let movies = [];
let filteredMovies = [];
let currentCategory = 'all';
let isClosingPlayer = false;
let searchTimeout = null;

function initApp() {
    console.log('Initializing app...');
    
    if (tg && tg.ready) {
        tg.ready();
        tg.expand();
    }
    
    showLoading();
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
        loadMovies();
        hideLoading();
        renderMovies(movies);
        setupEventListeners();
        initVolumeSlider();
        console.log('App initialized successfully');
    }, 800);
}

function initVolumeSlider() {
    const slider = document.getElementById('volumeSlider');
    const progress = document.getElementById('volumeProgress');
    const thumb = document.getElementById('volumeThumb');

    let isDragging = false;
    let sliderRect = slider.getBoundingClientRect();

    const updateThumbAndProgress = (percent) => {
        percent = Math.max(0, Math.min(100, percent));
        const px = (percent / 100) * sliderRect.width;
        progress.style.width = `${percent}%`;
        thumb.style.left = `${px}px`;
        
        updateVideoVolume(percent / 100);
    }

    const getPercentFromClientX = (clientX) => {
        const offsetX = clientX - sliderRect.left;
        return (offsetX / sliderRect.width) * 100;
    }

    const onMove = (clientX) => {
        const percent = getPercentFromClientX(clientX);
        updateThumbAndProgress(percent);
    }

    const onMouseDown = (e) => {
        isDragging = true;
        sliderRect = slider.getBoundingClientRect();
        onMove(e.clientX);
        thumb.classList.add('active');
        e.preventDefault();
    }

    const onTouchStart = (e) => {
        isDragging = true;
        sliderRect = slider.getBoundingClientRect();
        onMove(e.touches[0].clientX);
        thumb.classList.add('active');
        e.preventDefault();
    }

    const onMouseMove = (e) => {
        if (isDragging) onMove(e.clientX);
    }

    const onTouchMove = (e) => {
        if (isDragging) onMove(e.touches[0].clientX);
        e.preventDefault();
    }

    const stopDrag = () => {
        isDragging = false;
        thumb.classList.remove('active');
    }

    // Events
    thumb.addEventListener('mousedown', onMouseDown);
    thumb.addEventListener('touchstart', onTouchStart, { passive: false });

    document.addEventListener('mousemove', onMouseMove);
    document.addEventListener('mouseup', stopDrag);
    document.addEventListener('touchmove', onTouchMove, { passive: false });
    document.addEventListener('touchend', stopDrag);

    slider.addEventListener('mousedown', (e) => {
        sliderRect = slider.getBoundingClientRect();
        onMove(e.clientX);
    });

    slider.addEventListener('touchstart', (e) => {
        sliderRect = slider.getBoundingClientRect();
        onMove(e.touches[0].clientX);
        e.preventDefault();
    }, { passive: false });

    // Initialize with 70% volume
    updateThumbAndProgress(70);
}

function updateVideoVolume(volume) {
    const iframe = document.querySelector('.rutube-iframe');
    if (iframe && iframe.contentWindow) {
        console.log('Setting volume to:', volume);
    }
}

function loadMovies() {
    movies = [
        {
            id: 1,
            title: "–§–æ—Ä—Å–∞–∂ 9",
            year: "2021",
            poster: "https://images.unsplash.com/photo-1594909122845-11baa439b7bf?w=300&h=400&fit=crop",
            rutubeEmbedUrl: "https://rutube.ru/play/embed/bb0c848e121e79263789b3b19460bff0/",
            rutubePageUrl: "https://rutube.ru/video/bb0c848e121e79263789b3b19460bff0/",
            category: "films",
            description: "–î–æ–º–∏–Ω–∏–∫ –¢–æ—Ä–µ—Ç—Ç–æ –≤–µ–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω—É—é –∂–∏–∑–Ω—å —Å –õ–µ—Ç—Ç–∏ –∏ —Å–≤–æ–∏–º —Å—ã–Ω–æ–º."
        },
        {
            id: 2,
            title: "–ú—Å—Ç–∏—Ç–µ–ª–∏: –§–∏–Ω–∞–ª",
            year: "2019",
            poster: "https://images.unsplash.com/photo-1635805737707-575885ab0820?w=300&h=400&fit=crop",
            rutubeEmbedUrl: "https://rutube.ru/play/embed/10675995/",
            rutubePageUrl: "https://rutube.ru/video/10675995/",
            category: "films",
            description: "–û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤ –∂–∏–≤—ã—Ö —á–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –ú—Å—Ç–∏—Ç–µ–ª–µ–π –ø—ã—Ç–∞—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¢–∞–Ω–æ—Å–∞."
        },
        {
            id: 3,
            title: "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫: –ù–µ—Ç –ø—É—Ç–∏ –¥–æ–º–æ–π",
            year: "2021",
            poster: "https://images.unsplash.com/photo-1635805737707-575885ab0820?w=300&h=400&fit=crop",
            rutubeEmbedUrl: "https://rutube.ru/play/embed/10675995/",
            rutubePageUrl: "https://rutube.ru/video/10675995/",
            category: "films",
            description: "–ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ –î–æ–∫—Ç–æ—Ä—É –°—Ç—Ä—ç–Ω–¥–∂—É."
        },
        {
            id: 4,
            title: "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤",
            year: "2011-2019",
            poster: "https://images.unsplash.com/photo-1594909122845-11baa439b7bf?w=300&h=400&fit=crop",
            rutubeEmbedUrl: "https://rutube.ru/play/embed/10675995/",
            rutubePageUrl: "https://rutube.ru/video/10675995/",
            category: "series",
            description: "–ë–æ—Ä—å–±–∞ –∑–∞ –ñ–µ–ª–µ–∑–Ω—ã–π —Ç—Ä–æ–Ω –≤ –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–º –º–∏—Ä–µ –í–µ—Å—Ç–µ—Ä–æ—Å–∞."
        },
        {
            id: 5,
            title: "–•–æ–ª–æ–¥–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ",
            year: "2013",
            poster: "https://images.unsplash.com/photo-1635805737707-575885ab0820?w=300&h=400&fit=crop",
            rutubeEmbedUrl: "https://rutube.ru/play/embed/10675995/",
            rutubePageUrl: "https://rutube.ru/video/10675995/",
            category: "cartoons",
            description: "–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –≠–ª—å–∑–∞ –æ–±–ª–∞–¥–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–π —Å–∏–ª–æ–π —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–µ–¥ –∏ —Å–Ω–µ–≥."
        },
        {
            id: 6,
            title: "–ö–æ—Ä–æ–ª—å –õ–µ–≤",
            year: "1994",
            poster: "https://images.unsplash.com/photo-1594909122845-11baa439b7bf?w=300&h=400&fit=crop",
            rutubeEmbedUrl: "https://rutube.ru/play/embed/10675995/",
            rutubePageUrl: "https://rutube.ru/video/10675995/",
            category: "cartoons",
            description: "–ú–æ–ª–æ–¥–æ–π –ª—å–≤–µ–Ω–æ–∫ –°–∏–º–±–∞ –ø–æ–∑–Ω–∞–µ—Ç –∏—Å—Ç–∏–Ω–Ω—ã–π —Å–º—ã—Å–ª –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏."
        }
    ];
    
    filteredMovies = [...movies];
}

function renderMovies(moviesArray) {
    const moviesList = document.getElementById('moviesList');
    
    if (moviesArray.length === 0) {
        moviesList.innerHTML = `
            <div class="empty-state">
                <h3>üé¨ –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
            </div>
        `;
        return;
    }
    
    moviesList.innerHTML = moviesArray.map((movie, index) => `
        <div class="movie-card" onclick="openMovie(${movie.id})" 
             style="animation-delay: ${index * 0.1}s">
            <img src="${movie.poster}" alt="${movie.title}" class="movie-poster"
                 onerror="this.src='https://images.unsplash.com/photo-1485846234645-a62644f84728?w=300&h=400&fit=crop'">
            <div class="movie-info">
                <div class="movie-title">${movie.title}</div>
                <div class="movie-year">${movie.year}</div>
            </div>
        </div>
    `).join('');
}

function openMovie(movieId) {
    const movie = movies.find(m => m.id === movieId);
    if (!movie) return;
    
    if (tg && tg.showPopup) {
        tg.showPopup({
            title: `${movie.title} (${movie.year})`,
            message: movie.description,
            buttons: [
                {id: 'watch', type: 'default', text: 'üé• –°–º–æ—Ç—Ä–µ—Ç—å'},
                {id: 'cancel', type: 'cancel'}
            ]
        }, function(buttonId) {
            if (buttonId === 'watch') {
                playRuTubeVideo(movie.rutubeEmbedUrl, movie.rutubePageUrl);
            }
        });
    } else {
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        playRuTubeVideo(movie.rutubeEmbedUrl, movie.rutubePageUrl);
    }
}

function playRuTubeVideo(embedUrl, pageUrl) {
    const playerContainer = document.getElementById('playerContainer');
    const videoPlayerContainer = document.getElementById('rutubePlayer');
    
    isClosingPlayer = false;
    playerContainer.classList.remove('closing');
    
    videoPlayerContainer.innerHTML = `
        <iframe 
            class="rutube-iframe"
            src="${embedUrl}" 
            frameborder="0" 
            allow="autoplay; encrypted-media; fullscreen"
            allowfullscreen
            loading="lazy"
        ></iframe>
    `;
    
    playerContainer.style.display = 'flex';
    document.body.style.overflow = 'hidden';
}

function closePlayer() {
    if (isClosingPlayer) return;
    
    const playerContainer = document.getElementById('playerContainer');
    const videoPlayerContainer = document.getElementById('rutubePlayer');
    
    isClosingPlayer = true;
    playerContainer.classList.add('closing');
    
    setTimeout(() => {
        videoPlayerContainer.innerHTML = '';
        playerContainer.style.display = 'none';
        playerContainer.classList.remove('closing');
        document.body.style.overflow = 'auto';
        isClosingPlayer = false;
    }, 300);
}

function setupEventListeners() {
    const searchInput = document.getElementById('searchInput');
    
    // Debounce –ø–æ–∏—Å–∫–∞
    searchInput.addEventListener('input', function(e) {
        clearTimeout(searchTimeout);
        const searchTerm = e.target.value.toLowerCase().trim();
        searchTimeout = setTimeout(() => {
            filterMovies(searchTerm, currentCategory);
        }, 300);
    });
    
    const categoryBtns = document.querySelectorAll('.category-btn');
    categoryBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            categoryBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const category = this.dataset.category;
            currentCategory = category;
            filterMovies(searchInput.value.toLowerCase().trim(), category);
        });
    });
    
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closePlayer();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    document.getElementById('playerContainer').addEventListener('click', function(e) {
        if (e.target === this) {
            closePlayer();
        }
    });
}

function filterMovies(searchTerm, category) {
    let results = [...movies];
    
    if (category !== 'all') {
        results = results.filter(movie => movie.category === category);
    }
    
    if (searchTerm) {
        results = results.filter(movie => 
            movie.title.toLowerCase().includes(searchTerm) ||
            movie.description.toLowerCase().includes(searchTerm)
        );
    }
    
    filteredMovies = results;
    renderMovies(filteredMovies);
}

function showLoading() {
    document.getElementById('loading').style.display = 'block';
    document.getElementById('moviesList').innerHTML = '';
}

function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', initApp);
